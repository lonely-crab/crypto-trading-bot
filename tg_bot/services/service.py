from pybit.unified_trading import HTTP
import time
from datetime import datetime, timedelta

from tg_bot.config import BYBIT_API_KEY, BYBIT_API_SECRET


from typing import Dict, List, Optional, Any, Union

SIGNALS_COUNT = {}

# ==== –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ByBit ====
http_session = HTTP(
    testnet=False,
    api_key=BYBIT_API_KEY,
    api_secret=BYBIT_API_SECRET
)

def get_all_tickers() -> Optional[List[str]]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö USDT-–ø–∞—Ä."""
    response: Union[Dict, Any] = http_session.get_tickers(category="linear")
    print("Currencies retrieved. Receiving oi and price.")
    return [ticker["symbol"] for ticker in response["result"]["list"] if ticker["symbol"].endswith("USDT")]


def get_oi_and_price(symbol, interval_minutes: str):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ OI –∏ —Ü–µ–Ω—ã –∑–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        - –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è OI
        - –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ OI (–≤ –º–∏–ª–ª–∏–æ–Ω–∞—Ö $)
        - –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
        - –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É
    """
    now = int(time.time()) * 1000

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ OI
        oi_response = http_session.get_open_interest(
            category="linear",
            symbol=symbol,
            intervalTime=interval_minutes,
            endTime=now,
            limit=2
        )

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã (–∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏)
        price_response = http_session.get_kline(
            category="linear",
            symbol=symbol,
            interval=interval_minutes.strip("min"),
            end=now,
            limit=2
        )

        oi_data = oi_response["result"]["list"]
        price_data = price_response["result"]["list"]


        if len(oi_data) < 2 or len(price_data) < 2:
            return None, None, None, None, None, None

        oi_start = float(oi_data[1]["openInterest"])
        oi_end = float(oi_data[0]["openInterest"])
        oi_change = ((oi_end - oi_start) / oi_start) * 100
        oi_change_abs = (oi_end - oi_start) / 1_000_000  

        price_start = float(price_data[1][4])  
        price_end = float(price_data[0][4])
        price_change = ((price_end - price_start) / price_start) * 100

        return oi_change, oi_change_abs, price_change, price_end, oi_data[0]["timestamp"], oi_data[1]["timestamp"]

    except Exception as e:
        print(f"[ERROR] Failed for {symbol}: {e}")
        return None, None, None, None, None, None



def analyze_market(interval_minutes: str, min_percent: float, symbol: str) -> Optional[str]:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –ø–æ –≤—Å–µ–º –º–æ–Ω–µ—Ç–∞–º.
    
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞.
    """

    # print(f"\nüïí Analyzing market... {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    # –°–æ–±–∏—Ä–∞–µ–º –≤—ã–≤–æ–¥ –≤ —Å—Ç—Ä–æ–∫—É
    result_lines = []

    oi_change, oi_change_abs, price_change, price_end, end, start = get_oi_and_price(symbol, interval_minutes)
    try:
        start_dt = datetime.fromtimestamp(int(start) / 1000)
        end_dt = datetime.fromtimestamp(int(end) / 1000)
    except Exception as e:
        result_lines.append(f"[ERROR] {symbol}: {e}")
        return None

    if oi_change is None or price_change is None:
        return None

    if abs(oi_change) >= min_percent or abs(price_change) >= min_percent:
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ 24 —á–∞—Å–∞
        SIGNALS_COUNT[symbol] = SIGNALS_COUNT.get(symbol, 0) + 1

        result_lines.append(f"Interval: {start_dt} - {end_dt}")
        result_lines.append(f"\nüì∫ [ByBit](https://www.bybit.com/trade/usdt/{symbol}) ‚Äî ‚åöÔ∏è{interval_minutes} ‚Äî [{symbol}](https://www.coinglass.com/tv/Bybit_{symbol})")
        direction = "increased" if oi_change > 0 else "decreased"
        result_lines.append(f"üìâ OI {direction} by {oi_change:.2f}% ({oi_change_abs:.2f}M $)")
        result_lines.append(f"üí± Price change: {price_change:.2f}%")
        result_lines.append(f"\nüîÅ Count of signals per 24h: {SIGNALS_COUNT[symbol]}")
        result_lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è

    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    if not result_lines:
        return None

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å—ë –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    return "\n".join(result_lines)

